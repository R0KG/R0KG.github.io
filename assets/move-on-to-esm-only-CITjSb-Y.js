import{_ as r}from"./WrapperPost.vue_vue_type_script_setup_true_lang-BIWOPV5j.js";import{_ as i}from"./GitHubLink.vue_vue_type_script_setup_true_lang-CmUUhvTE.js";import{u as l,c as d,o as p,w as u,a as e,b as o,d as h}from"./app-B6ufnZLC.js";import"./logo-github-DkNf0KEY.js";const m="/images/npm-esm-vs-cjs-2024.svg",g="/images/node-modules-inspector-1.png",f="/images/node-modules-inspector-2.png",c="/images/node-modules-inspector-3.png",y={class:"prose m-auto slide-enter-content"},x={__name:"move-on-to-esm-only",setup(b){const n={title:"Move on to ESM-only",date:"2025-02-05T00:00:00.000Z",lang:"en",duration:"15min",description:"Let's move on to ESM-only",image:"https://romanmerkulov.me/og/move-on-to-esm-only.png",meta:[{property:"og:title",content:"Move on to ESM-only"},{name:"twitter:title",content:"Move on to ESM-only"},{name:"description",content:"Let's move on to ESM-only"},{property:"og:description",content:"Let's move on to ESM-only"},{name:"twitter:description",content:"Let's move on to ESM-only"},{property:"og:image",content:"https://romanmerkulov.me/og/move-on-to-esm-only.png"},{name:"twitter:image",content:"https://romanmerkulov.me/og/move-on-to-esm-only.png"},{name:"twitter:card",content:"summary_large_image"}]};return l({title:"Move on to ESM-only",meta:[{property:"og:title",content:"Move on to ESM-only"},{name:"twitter:title",content:"Move on to ESM-only"},{name:"description",content:"Let's move on to ESM-only"},{property:"og:description",content:"Let's move on to ESM-only"},{name:"twitter:description",content:"Let's move on to ESM-only"},{property:"og:image",content:"https://romanmerkulov.me/og/move-on-to-esm-only.png"},{name:"twitter:image",content:"https://romanmerkulov.me/og/move-on-to-esm-only.png"},{name:"twitter:card",content:"summary_large_image"}]}),(k,t)=>{const a=i,s=r;return p(),d(s,{frontmatter:n},{default:u(()=>[e("div",y,[t[2]||(t[2]=e("div",{class:"table-of-contents"},[e("div",{class:"table-of-contents-anchor"},[e("div",{class:"i-ri-menu-2-fill"})]),e("ul",null,[e("li",null,[e("a",{href:"#the-toolings-are-ready"},"The Toolings are Ready "),e("ul",null,[e("li",null,[e("a",{href:"#modern-tools"},"Modern Tools ")]),e("li",null,[e("a",{href:"#top-down-bottom-up"},"Top-Down & Bottom-Up ")]),e("li",null,[e("a",{href:"#requiring-esm-in-node-js"},"Requiring ESM in Node.js ")])])]),e("li",null,[e("a",{href:"#the-troubles-with-dual-formats"},"The Troubles with Dual Formats "),e("ul",null,[e("li",null,[e("a",{href:"#interop-issues"},"Interop Issues ")]),e("li",null,[e("a",{href:"#dependency-resolution"},"Dependency Resolution ")]),e("li",null,[e("a",{href:"#package-size"},"Package Size ")])])]),e("li",null,[e("a",{href:"#when-should-we-move-to-esm-only"},"When Should We Move to ESM-only? "),e("ul",null,[e("li",null,[e("a",{href:"#new-packages"},"New Packages ")]),e("li",null,[e("a",{href:"#browser-targeted-packages"},"Browser-targeted Packages ")]),e("li",null,[e("a",{href:"#standalone-cli"},"Standalone CLI ")]),e("li",null,[e("a",{href:"#node-js-support"},"Node.js Support ")]),e("li",null,[e("a",{href:"#know-your-consumers"},"Know Your Consumers ")])])]),e("li",null,[e("a",{href:"#how-far-we-are"},"How Far We Are? ")]),e("li",null,[e("a",{href:"#moving-forward"},"Moving Forward ")])])],-1)),t[3]||(t[3]=e("p",null,[o("Three years ago, I wrote a post about "),e("a",{href:"/posts/publish-esm-and-cjs"},"shipping ESM & CJS in a single package"),o(", advocating for dual CJS/ESM formats to ease user migration and trying to make the best of both worlds. Back then, I didn’t fully agree with "),e("a",{href:"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c",target:"_blank",rel:"noopener"},"aggressively shipping ESM-only"),o(", as I considered the ecosystem wasn’t ready, especially since the push was mostly from low-level libraries. Over time, as tools and the ecosystem have evolved, my perspective has gradually shifted towards more and more on adopting ESM-only.")],-1)),t[4]||(t[4]=e("p",null,[o("As of 2025, a decade has passed since ESM was first introduced in 2015. Modern tools and libraries have increasingly adopted ESM as the primary module format. According to "),e("a",{href:"https://github.com/wooorm",class:"markdown-magic-link markdown-magic-link-github-at",target:"_blank",rel:"noopener"},[e("span",{class:"markdown-magic-link-image",style:{"background-image":"url('https://github.com/wooorm.png')"}}),o("WOOORM")]),o("’s "),e("a",{href:"https://github.com/wooorm/npm-esm-vs-cjs",target:"_blank",rel:"noopener"},"script"),o(", the packages that ships ESM on npm in 2021 was "),e("strong",null,"7.8%"),o(", and by the end of 2024, it had reached "),e("a",{href:"https://github.com/wooorm/npm-esm-vs-cjs",target:"_blank",rel:"noopener"},[e("strong",null,"25.8%")]),o(". Although a significant portion of packages still use CJS, the trend clearly shows a good shift towards ESM.")],-1)),t[5]||(t[5]=e("figure",null,[e("img",{src:m,"dark:filter-invert":""}),e("figcaption",{"text-center":""},[o("ESM adoption over time, generated by the "),e("code",null,"npm-esm-vs-cjs"),o(" script. Last updated at 2024-11-27")])],-1)),t[6]||(t[6]=e("p",null,"Here in this post, I’d like to share my thoughts on the current state of the ecosystem and why I believe it’s time to move on to ESM-only.",-1)),t[7]||(t[7]=e("h2",{id:"the-toolings-are-ready",tabindex:"-1"},[o("The Toolings are Ready "),e("a",{class:"header-anchor",href:"#the-toolings-are-ready","aria-hidden":"true"},"#")],-1)),t[8]||(t[8]=e("h3",{id:"modern-tools",tabindex:"-1"},[o("Modern Tools "),e("a",{class:"header-anchor",href:"#modern-tools","aria-hidden":"true"},"#")],-1)),t[9]||(t[9]=e("p",null,[o("With the rise of "),e("a",{href:"https://vite.dev",target:"_blank",rel:"noopener"},"Vite"),o(" as a popular modern frontend build tool, many meta-frameworks like "),e("a",{href:"https://nuxtjs.org",target:"_blank",rel:"noopener"},"Nuxt"),o(", "),e("a",{href:"https://kit.svelte.dev",target:"_blank",rel:"noopener"},"SvelteKit"),o(", "),e("a",{href:"https://astro.build",target:"_blank",rel:"noopener"},"Astro"),o(", "),e("a",{href:"https://solidstart.dev",target:"_blank",rel:"noopener"},"SolidStart"),o(", "),e("a",{href:"https://remix.run",target:"_blank",rel:"noopener"},"Remix"),o(", "),e("a",{href:"https://storybook.js.org",target:"_blank",rel:"noopener"},"Storybook"),o(", "),e("a",{href:"https://redwoodjs.com",target:"_blank",rel:"noopener"},"Redwood"),o(", and many others are all built on top of Vite nowadays, that "),e("strong",null,"treating ESM as a first-class citizen"),o(".")],-1)),t[10]||(t[10]=e("p",null,[o("As a complement, we have also testing library "),e("a",{href:"https://vitest.dev",target:"_blank",rel:"noopener"},"Vitest"),o(", which was designed for ESM from the day one with powerful module mocking capability and efficient fine-grain caching support.")],-1)),t[11]||(t[11]=e("p",null,[o("CLI tools like "),e("a",{href:"https://github.com/privatenumber/tsx",target:"_blank",rel:"noopener"},[e("code",null,"tsx")]),o(" and "),e("a",{href:"https://github.com/unjs/jiti",target:"_blank",rel:"noopener"},[e("code",null,"jiti")]),o(" offer a seamless experience for running TypeScript and ESM code without requiring additional configuration. This simplifies the development process and reduces the overhead associated with setting up a project to use ESM.")],-1)),t[12]||(t[12]=e("p",null,[o("Other tools, for example, "),e("a",{href:"https://eslint.org",target:"_blank",rel:"noopener"},"ESLint"),o(", in the recent v9.0, introduced a new flat config system that enables native ESM support with "),e("code",null,"eslint.config.mjs"),o(", even in CJS projects.")],-1)),t[13]||(t[13]=e("h3",{id:"top-down-bottom-up",tabindex:"-1"},[o("Top-Down & Bottom-Up "),e("a",{class:"header-anchor",href:"#top-down-bottom-up","aria-hidden":"true"},"#")],-1)),t[14]||(t[14]=e("p",null,[o("Back in 2021, when "),e("a",{href:"https://github.com/sindresorhus",class:"markdown-magic-link markdown-magic-link-github-at",target:"_blank",rel:"noopener"},[e("span",{class:"markdown-magic-link-image",style:{"background-image":"url('https://github.com/sindresorhus.png')"}}),o("SINDRESORHUS")]),o(" first started migrating all his packages to ESM-only, for example, "),e("code",null,"find-up"),o(" and "),e("code",null,"execa"),o(", it was a bold move. I consider this move as a "),e("strong",null,"bottom-up"),o(" approach, as the packages that rather low-level and many their dependents are not ready for ESM yet. I was worried that this would force those dependents to stay on the old version of the packages, which might result in the ecosystem being fragmented. (As of today, I actually appreciate that move bringing us quite a lot of high-quality ESM packages, regardless that the process wasn’t super smooth).")],-1)),t[15]||(t[15]=e("p",null,[o("It’s way easier for an ESM or Dual formats package to depend on CJS packages, but not the other way around. In terms of smooth adoption, I believe the "),e("strong",null,"top-down"),o(" approach is more effective in pushing the ecosystem forward. With the support of high-level frameworks and tools from top-down, it’s no longer a significant obstacle to use ESM-only packages. The remaining challenges in terms of ESM adoption primarily lie with package authors needing to migrate and ship their code in ESM format.")],-1)),t[16]||(t[16]=e("h3",{id:"requiring-esm-in-node-js",tabindex:"-1"},[o("Requiring ESM in Node.js "),e("a",{class:"header-anchor",href:"#requiring-esm-in-node-js","aria-hidden":"true"},"#")],-1)),t[17]||(t[17]=e("p",null,[o("The "),e("a",{href:"https://joyeecheung.github.io/blog/2024/03/18/require-esm-in-node-js/",target:"_blank",rel:"noopener"},[o("capability to "),e("code",null,"require()"),o(" ESM modules")]),o(" in Node.js, "),e("a",{href:"https://github.com/nodejs/node/pull/51977",target:"_blank",rel:"noopener"},"initiated"),o(" by "),e("a",{href:"https://github.com/joyeecheung",class:"markdown-magic-link markdown-magic-link-github-at",target:"_blank",rel:"noopener"},[e("span",{class:"markdown-magic-link-image",style:{"background-image":"url('https://github.com/joyeecheung.png')"}}),o("JOYEECHEUNG")]),o(", marks an "),e("strong",null,"incredible milestone"),o(". This feature allows packages to be published as ESM-only while still being consumable by CJS codebases with minimal modifications. It helps avoid the "),e("a",{href:"/posts/async-sync-in-between"},"async infection"),o(" (also known as "),e("a",{href:"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/",target:"_blank",rel:"noopener"},"Red Functions"),o(") introduced by dynamic "),e("code",null,"import()"),o(" ESM, which can be pretty hard, if not impossible in some cases, to migrate and adapt.")],-1)),t[18]||(t[18]=e("p",null,[o("This feature was recently "),e("a",{href:"https://github.com/nodejs/node/pull/55085",target:"_blank",rel:"noopener"},"unflagged"),o(" and "),e("a",{href:"https://github.com/nodejs/node/pull/55217",target:"_blank",rel:"noopener"},"backported to Node.js v22"),o(" ("),e("a",{href:"https://github.com/nodejs/node/pull/56927",target:"_blank",rel:"noopener"},"and soon v20"),o("), which means it should be available to many developers already. Consider the "),e("a",{href:"#top-down--bottom-up"},"top-down or bottom-up"),o(" metaphor, this feature actually makes it possible to start ESM migration also from "),e("strong",null,"middle-out"),o(", as it allows import chains like "),e("code",null,"ESM → CJS → ESM → CJS"),o(" to work seamlessly.")],-1)),t[19]||(t[19]=e("p",null,[o("To solve the interop issue between CJS and ESM in this case, "),e("a",{href:"https://nodejs.org/api/modules.html#loading-ecmascript-modules-using-require",target:"_blank",rel:"noopener"},"Node.js also introduced"),o(" a new "),e("code",null,"export { Foo as 'module.exports' }"),o(" syntax in ESM to export CJS-compatible exports (by "),e("a",{href:"https://github.com/nodejs/node/pull/54563",target:"_blank",rel:"noopener"},"this PR"),o("). This allows package authors to publish ESM-only packages while still supporting CJS consumers, without even introducing breaking changes (expcet for changing the required Node.js version).")],-1)),t[20]||(t[20]=e("p",null,[o("For more details on the progress and discussions around this feature, keep track on "),e("a",{href:"https://github.com/nodejs/node/issues/52697",target:"_blank",rel:"noopener"},"this issue"),o(".")],-1)),t[21]||(t[21]=e("h2",{id:"the-troubles-with-dual-formats",tabindex:"-1"},[o("The Troubles with Dual Formats "),e("a",{class:"header-anchor",href:"#the-troubles-with-dual-formats","aria-hidden":"true"},"#")],-1)),t[22]||(t[22]=e("p",null,"While dual CJS/ESM packages have been a quite helpful transition mechanism, they come with their own set of challenges. Maintaining two separate formats can be cumbersome and error-prone, especially when dealing with complex codebases. Here are some of the issues that arise when maintaining dual formats:",-1)),t[23]||(t[23]=e("h3",{id:"interop-issues",tabindex:"-1"},[o("Interop Issues "),e("a",{class:"header-anchor",href:"#interop-issues","aria-hidden":"true"},"#")],-1)),t[24]||(t[24]=e("p",null,[o("Fundamentally, CJS and ESM are different module systems with distinct design philosophies. Although Node.js has made it possible to import CJS modules in ESM, dynamically import ESM in CJS, and even "),e("code",null,"require()"),o(" ESM modules, there are still many tricky cases that can lead to interop issues.")],-1)),t[25]||(t[25]=e("p",null,[o("One key difference is that CJS typically uses a single "),e("code",null,"module.exports"),o(" object, while ESM supports both default and named exports. When authoring code in ESM and transpiling to CJS, handling exports can be particularly challenging, especially when the exported value is a non-object, such as a function or a class. Additionally, to make the types correct, we also need to introduce further complications with "),e("code",null,".d.mts"),o(" and "),e("code",null,".d.cts"),o(" declaration files. And so on…")],-1)),t[26]||(t[26]=e("p",null,"As I am trying to explain this problem deeper, I found that I actually wish you didn’t even need to be bothered with this problem at all. It’s frankly too complicated and frustrating. If you are just a user of packages, let alone the package authors to worry about that. This is one of the reasons I advocate for the entire ecosystem to transition to ESM, to leave these problems behind and spare everyone from this unnecessary hassle.",-1)),t[27]||(t[27]=e("h3",{id:"dependency-resolution",tabindex:"-1"},[o("Dependency Resolution "),e("a",{class:"header-anchor",href:"#dependency-resolution","aria-hidden":"true"},"#")],-1)),t[28]||(t[28]=e("p",null,"When a package has both CJS and ESM formats, the resolution of dependencies can become convoluted. For example, if a package depends on another package that only ships ESM, the consumer must ensure that the ESM version is used. This can lead to version conflicts and dependency resolution issues, especially when dealing with transitive dependencies.",-1)),t[29]||(t[29]=e("p",null,"Also for packages that are designed to used with singleton pattern, this might introduce multiple copies of the same package and cause unexpected behaviors.",-1)),t[30]||(t[30]=e("h3",{id:"package-size",tabindex:"-1"},[o("Package Size "),e("a",{class:"header-anchor",href:"#package-size","aria-hidden":"true"},"#")],-1)),t[31]||(t[31]=e("p",null,"Shipping dual formats essentially doubles the package size, as both CJS and ESM bundles need to be included. While a few extra kilobytes might not seem significant for a single package, the overhead can quickly add up in projects with hundreds of dependencies, leading to the infamous node_modules bloat. Therefore, package authors should keep an eye on their package size. Moving to ESM-only is a way to optimize it, especially if the package doesn’t have strong requirements on CJS.",-1)),t[32]||(t[32]=e("h2",{id:"when-should-we-move-to-esm-only",tabindex:"-1"},[o("When Should We Move to ESM-only? "),e("a",{class:"header-anchor",href:"#when-should-we-move-to-esm-only","aria-hidden":"true"},"#")],-1)),t[33]||(t[33]=e("p",null,"This post does not intend to diminish the value of dual-format publishing. Instead, I want to encourage evaluating the current state of the ecosystem and the potential benefits of transitioning to ESM-only.",-1)),t[34]||(t[34]=e("p",null,"There are several factors to consider when deciding whether to move to ESM-only:",-1)),t[35]||(t[35]=e("h3",{id:"new-packages",tabindex:"-1"},[o("New Packages "),e("a",{class:"header-anchor",href:"#new-packages","aria-hidden":"true"},"#")],-1)),t[36]||(t[36]=e("p",null,[o("I strongly recommend that "),e("strong",null,"all new packages"),o(" be released as ESM-only, as there are no legacy dependencies to consider. New adopters are likely already using a modern, ESM-ready stack, there being ESM-only should not affect the adoption. Additionally, maintaining a single module system simplifies development, reduces maintenance overhead, and ensures that your package benefits from future ecosystem advancements.")],-1)),t[37]||(t[37]=e("h3",{id:"browser-targeted-packages",tabindex:"-1"},[o("Browser-targeted Packages "),e("a",{class:"header-anchor",href:"#browser-targeted-packages","aria-hidden":"true"},"#")],-1)),t[38]||(t[38]=e("p",null,"If a package is primarily targeted for the browser, it makes total sense to ship ESM-only. In most cases, browser packages go through a bundler, where ESM provides significant advantages in static analysis and tree-shaking. This leads to smaller and more optimized bundles, which would also improve loading performance and reduce bandwidth consumption for end users.",-1)),t[39]||(t[39]=e("h3",{id:"standalone-cli",tabindex:"-1"},[o("Standalone CLI "),e("a",{class:"header-anchor",href:"#standalone-cli","aria-hidden":"true"},"#")],-1)),t[40]||(t[40]=e("p",null,[o("For a standalone CLI tool, it’s no difference to end users whether it’s ESM or CJS. However, using ESM would enable your dependencies to also be ESM, facilitating the ecosystem’s transition to ESM from a "),e("a",{href:"#top-down--bottom-up"},"top-down approach"),o(".")],-1)),t[41]||(t[41]=e("h3",{id:"node-js-support",tabindex:"-1"},[o("Node.js Support "),e("a",{class:"header-anchor",href:"#node-js-support","aria-hidden":"true"},"#")],-1)),t[42]||(t[42]=e("p",null,[o("If a package is targeting the evergreen Node.js versions, it’s a good time to consider ESM-only, especially with the recent "),e("a",{href:"#requiring-esm-in-nodejs"},[e("code",null,"require(ESM)"),o(" support")]),o(".")],-1)),t[43]||(t[43]=e("h3",{id:"know-your-consumers",tabindex:"-1"},[o("Know Your Consumers "),e("a",{class:"header-anchor",href:"#know-your-consumers","aria-hidden":"true"},"#")],-1)),t[44]||(t[44]=e("p",null,"If a package already has certain users, it’s essential to understand the dependents’ status and requirements. For example, for an ESLint plugin/utils that requires ESLint v9, while ESLint v9’s new config system supports ESM natively even in CJS projects, there is no blocker for it to be ESM-only.",-1)),t[45]||(t[45]=e("p",null,"Definitely, there are different factors to consider for different projects. But in general, I believe the ecosystem is ready for more packages to move to ESM-only, and it’s a good time to evaluate the benefits and potential challenges of transitioning.",-1)),t[46]||(t[46]=e("h2",{id:"how-far-we-are",tabindex:"-1"},[o("How Far We Are? "),e("a",{class:"header-anchor",href:"#how-far-we-are","aria-hidden":"true"},"#")],-1)),t[47]||(t[47]=e("p",null,"The transition to ESM is a gradual process that requires collaboration and effort from the entire ecosystem. Which I believe we are on a good track moving forward.",-1)),t[48]||(t[48]=e("p",null,[o("To improve the transparency and visibility of the ESM adoption, I recently built a visualized tool called "),e("a",{href:"https://github.com/antfu/node-modules-inspector",target:"_blank",rel:"noopener"},"Node Modules Inspector"),o(" for analyzing your packages’s dependencies. It provides insights into the ESM adoption status of your dependencies and helps identify potential issues when migrating to ESM.")],-1)),t[49]||(t[49]=e("p",null,"Here are some screenshots of the tool to give you a quick impression:",-1)),t[50]||(t[50]=e("figure",null,[e("img",{src:g,"scale-110":""}),e("figcaption",{"text-center":""},"Node Modules Inspector - Overview")],-1)),t[51]||(t[51]=e("figure",null,[e("img",{src:f,"scale-110":""}),e("figcaption",{"text-center":""},"Node Modules Inspector - Dependency Graph")],-1)),t[52]||(t[52]=e("figure",null,[e("img",{src:c,"scale-110":""}),e("figcaption",{"text-center":""},"Node Modules Inspector - Reports like ESM Adoptions and Duplicated Packages")],-1)),t[53]||(t[53]=e("p",null,"This tool is still in its early stages, but I hope it will be a valuable resource for package authors and maintainers to track the ESM adoption progress of their dependencies and make informed decisions about transitioning to ESM-only.",-1)),e("p",null,[t[0]||(t[0]=o("To learn more about how to use it and inspect your projects, check the repository ")),h(a,{repo:"antfu/node-modules-inspector"}),t[1]||(t[1]=o("."))]),t[54]||(t[54]=e("h2",{id:"moving-forward",tabindex:"-1"},[o("Moving Forward "),e("a",{class:"header-anchor",href:"#moving-forward","aria-hidden":"true"},"#")],-1)),t[55]||(t[55]=e("p",null,"I am planning to gradually transition the packages I maintain to ESM-only and take a closer look at the dependencies we rely on. We also have plenty of exciting ideas for the Node Modules Inspector, aiming to provide more useful insights and help find the best path forward.",-1)),t[56]||(t[56]=e("p",null,"I look forward to a more portable, resilient, and optimized JavaScript/TypeScript ecosystem.",-1)),t[57]||(t[57]=e("p",null,"I hope this post has shed some light on the benefits of moving to ESM-only and the current state of the ecosystem. If you have any thoughts or questions, feel free to reach out using the links below. Thank you for reading!",-1))])]),_:1})}}};export{x as default};
